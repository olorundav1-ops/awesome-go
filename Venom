<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Matrix Digital Rain</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background: black;
        }
        canvas {
            display: block;
        }
    </style>
</head>
<body>
    <canvas id="matrix"></canvas>
    <script>
        // Get the canvas element
        const canvas = document.getElementById('matrix');
        const ctx = canvas.getContext('2d');

        // Set canvas size to window size
        canvas.height = window.innerHeight;
        canvas.width = window.innerWidth;

        // Characters to display (includes numbers, letters, and symbols)
        const chars = '0123456789ABCDEFGHIJKLMNOPQRSvenomTUVWXYZ!@#$%^&*()_+-=[]{}|;:,.<>?';
        const fontSize = 14;
        const columns = canvas.width / fontSize;
        const drops = [];

        // Initialize drops array
        for (let x = 0; x < columns; x++) {
            drops[x] = 1;
        }

        // Draw function
        function draw() {
            // Semi-transparent black background to create fading effect
            ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Set text style
            ctx.fillStyle = '#0F0'; // Green color
            ctx.font = fontSize + 'px monospace';

            // Loop through drops
            for (let i = 0; i < drops.length; i++) {
                // Random character
                const text = chars.charAt(Math.floor(Math.random() * chars.length));

                // Draw character
                ctx.fillText(text, i * fontSize, drops[i] * fontSize);

                // Reset drop to top when it reaches bottom
                if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {
                    drops[i] = 0;
                }

                // Increment drop position
                drops[i]++;
            }
        }

        // Run animation
        setInterval(draw, 33);

        // Resize canvas when window is resized
        window.addEventListener('resize', () => {
            canvas.height = window.innerHeight;
            canvas.width = window.innerWidth;
            // Recalculate columns
            drops.length = Math.floor(canvas.width / fontSize);
            for (let x = drops.length; x < columns; x++) {
                drops[x] = 1;
            }
        });
    </script>
</body>
</html>